"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[349],{1576:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var c=i(3303),s=i(4848),t=i(8453);const a={title:"Introduction to Blockchain",description:"A simple implementation of a blockchain in Python",slug:"blockchain-1",authors:[{name:"Roberto Vicario",title:"Software Engineer",url:"https://github.com/robertovicario",image_url:"https://github.com/robertovicario.png",socials:{website:"https://www.robertovicario.com",instagram:"robertovicario__",linkedin:"robertovicario",github:"robertovicario"}}],tags:["computer-science","blockchain","cybersecurity","cryptography","python"]},o="Introduction",r={authorsImageUrls:[void 0]},l=[{value:"\ud83d\udcd6 Lecture",id:"-lecture",level:3},{value:"\u2699\ufe0f Implementation",id:"\ufe0f-implementation",level:2},{value:"\ud83d\udce6 Dependencies",id:"-dependencies",level:3},{value:"\ud83d\udcb8 Transactions",id:"-transactions",level:3},{value:"\ud83e\uddf1 Blocks",id:"-blocks",level:3},{value:"\u26d3\ufe0f Blockchain",id:"\ufe0f-blockchain",level:3},{value:"\ud83d\ude80 Let&#39;s Play",id:"-lets-play",level:2},{value:"\u26d3\ufe0f Creating a Blockchain",id:"\ufe0f-creating-a-blockchain",level:3},{value:"\ud83d\udcb8 Adding Transactions",id:"-adding-transactions",level:3},{value:"\ud83d\udd25 Chain Validation",id:"-chain-validation",level:3},{value:"\ud83c\udfaf Conclusion",id:"-conclusion",level:2}];function h(n){const e={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h3,{id:"-lecture",children:"\ud83d\udcd6 Lecture"}),"\n",(0,s.jsxs)(e.p,{children:["Playground linked with the lecture ",(0,s.jsx)(e.a,{href:"/docs/blockchain/1",children:"Blockchain: Introduction"}),"."]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\ufe0f-implementation",children:"\u2699\ufe0f Implementation"}),"\n",(0,s.jsxs)(e.p,{children:["In this playground, we will implement a simple blockchain in Python. The goal is to understand the basic concepts of blockchain technology, including ",(0,s.jsx)(e.strong,{children:"blocks"}),", ",(0,s.jsx)(e.strong,{children:"transactions"}),", and the ",(0,s.jsx)(e.strong,{children:"chain"})," itself."]}),"\n",(0,s.jsx)(e.h3,{id:"-dependencies",children:"\ud83d\udce6 Dependencies"}),"\n",(0,s.jsx)(e.p,{children:"To get started, we need to import the following dependencies:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"from time import localtime, strftime\nfrom typing import List\nimport hashlib\nimport json\n"})}),"\n",(0,s.jsx)(e.h3,{id:"-transactions",children:"\ud83d\udcb8 Transactions"}),"\n",(0,s.jsxs)(e.p,{children:["To create a ",(0,s.jsx)(e.code,{children:"Transaction"})," class to represent a transaction between two parties. Each transaction will include a ",(0,s.jsx)(e.strong,{children:"sender"}),", a ",(0,s.jsx)(e.strong,{children:"receiver"}),", and an ",(0,s.jsx)(e.strong,{children:"amount"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"class Transaction:\n    def __init__(self, sender: str, receiver: str, amount: float):\n        self.sender = sender\n        self.receiver = receiver\n        self.amount = amount\n\n    def __repr__(self):\n        return f'{self.sender} -> {self.receiver}: {self.amount}'\n"})}),"\n",(0,s.jsx)(e.h3,{id:"-blocks",children:"\ud83e\uddf1 Blocks"}),"\n",(0,s.jsxs)(e.p,{children:["Next, we will create a ",(0,s.jsx)(e.code,{children:"Block"})," class to represent a block in the blockchain. Each block will contain a ",(0,s.jsx)(e.strong,{children:"list of transactions"}),", a ",(0,s.jsx)(e.strong,{children:"timestamp"}),", and a ",(0,s.jsx)(e.strong,{children:"hash of the previous block"}),". In this case, the hash is calculated using the ",(0,s.jsx)(e.em,{children:"SHA-256"})," algorithm:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"class Block:\n    def __init__(self, transactions: List[Transaction], previous_hash: str):\n        self.timestamp = strftime('%Y-%m-%d %H:%M:%S', localtime())\n        self.transactions = transactions\n        self.previous_hash = previous_hash\n        self.hash = self.calculate_hash()\n\n    def calculate_hash(self):\n        tx_str = ''.join(str(tx) for tx in self.transactions)\n        block_string = f'{self.timestamp}{tx_str}{self.previous_hash}'\n        return hashlib.sha256(block_string.encode()).hexdigest()\n\n    def __repr__(self):\n        return json.dumps({\n            'hash': self.hash,\n            'previous_hash': self.previous_hash,\n            'transactions': [str(tx) for tx in self.transactions],\n            'timestamp': self.timestamp\n        }, indent=4)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ufe0f-blockchain",children:"\u26d3\ufe0f Blockchain"}),"\n",(0,s.jsxs)(e.p,{children:["Finally, we will create a ",(0,s.jsx)(e.code,{children:"Blockchain"})," class to represent the entire blockchain. This class will manage the ",(0,s.jsx)(e.strong,{children:"list of blocks"})," and the ",(0,s.jsx)(e.strong,{children:"pending transactions"}),". It will also include methods to ",(0,s.jsx)(e.strong,{children:"add transactions"}),", ",(0,s.jsx)(e.strong,{children:"mine new blocks"}),", and ",(0,s.jsx)(e.strong,{children:"validate the chain"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"class Blockchain:\n    def __init__(self):\n        self.chain: List[Block] = [self.create_genesis_block()]\n        self.pending_transactions: List[Transaction] = []\n\n    def create_genesis_block(self):\n        return Block(transactions=[], previous_hash='0')\n\n    def get_latest_block(self):\n        return self.chain[-1]\n\n    def add_transaction(self, transaction: Transaction):\n        self.pending_transactions.append(transaction)\n\n    def mine_block(self):\n        if not self.pending_transactions:\n            return None\n\n        new_block = Block(\n            transactions=self.pending_transactions,\n            previous_hash=self.get_latest_block().hash\n        )\n        self.chain.append(new_block)\n        self.pending_transactions = []\n        return new_block\n\n    def is_chain_valid(self):\n        for i in range(1, len(self.chain)):\n            curr = self.chain[i]\n            prev = self.chain[i - 1]\n            if curr.hash != curr.calculate_hash():\n                return False\n            if curr.previous_hash != prev.hash:\n                return False\n        return True\n\n    def __repr__(self):\n        return '\\n'.join(str(block) for block in self.chain)\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-lets-play",children:"\ud83d\ude80 Let's Play"}),"\n",(0,s.jsx)(e.p,{children:"Now that we have implemented the basic components of a blockchain, let's explore how to use them in practice."}),"\n",(0,s.jsx)(e.h3,{id:"\ufe0f-creating-a-blockchain",children:"\u26d3\ufe0f Creating a Blockchain"}),"\n",(0,s.jsxs)(e.p,{children:["We start by creating an instance of the ",(0,s.jsx)(e.code,{children:"Blockchain"})," class:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:'blockchain = Blockchain()\nprint(f"Blockchain: {blockchain}")\n'})}),"\n",(0,s.jsxs)(e.p,{children:["At the beginning, the blockchain contains only the ",(0,s.jsx)(e.strong,{children:"genesis block"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-out",children:'Blockchain: {\n    "hash": "3f1af6b8c2124cf3063dc68ee0f4889c4c088d3604b6cf42ab50bdd685e8f1b0",\n    "previous_hash": "0",\n    "transactions": [],\n    "timestamp": "2025-04-20 11:24:45"\n}\n'})}),"\n",(0,s.jsx)(e.admonition,{title:"Genesis Block",type:"info",children:(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.strong,{children:"genesis block"})," is the first block in a blockchain and serves as the foundation of the chain. It is ",(0,s.jsx)(e.strong,{children:"unique"})," because it has no previous block, and its ",(0,s.jsx)(e.code,{children:"previous_hash"})," is set to ",(0,s.jsx)(e.code,{children:"0"}),". This block is crucial for establishing the ",(0,s.jsx)(e.strong,{children:"integrity"})," and ",(0,s.jsx)(e.strong,{children:"immutability"})," of the blockchain."]})}),"\n",(0,s.jsx)(e.h3,{id:"-adding-transactions",children:"\ud83d\udcb8 Adding Transactions"}),"\n",(0,s.jsxs)(e.p,{children:["Now, let's add a first transaction of ",(0,s.jsx)(e.code,{children:"50"})," units from ",(0,s.jsx)(e.code,{children:"Alice"})," to ",(0,s.jsx)(e.code,{children:"Eve"})," and mine a new block:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"blockchain.add_transaction(Transaction('Alice', 'Eve', 50))\nmined_block = blockchain.mine_block()\nprint(f\"Blockchain: {blockchain}\")\nprint('\\n# -------------------------\\n')\nprint(f\"Mined Block 1: {mined_block}\")\n"})}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"mine_block"})," method creates a new block with the ",(0,s.jsx)(e.strong,{children:"pending transactions"})," and adds it to the blockchain. The ",(0,s.jsx)(e.code,{children:"previous_hash"})," of the new block is set to the ",(0,s.jsx)(e.strong,{children:"hash of the latest block"})," in the chain:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-out",children:'Blockchain: {\n    "hash": "3f1af6b8c2124cf3063dc68ee0f4889c4c088d3604b6cf42ab50bdd685e8f1b0",\n    "previous_hash": "0",\n    "transactions": [],\n    "timestamp": "2025-04-20 11:24:45"\n}\n{\n    "hash": "8c63bd4682ed1c53c365ebc9878987618eb45c69b9c1941ae3cd69bee1fdd389",\n    "previous_hash": "3f1af6b8c2124cf3063dc68ee0f4889c4c088d3604b6cf42ab50bdd685e8f1b0",\n    "transactions": [\n        "Alice -> Eve: 50"\n    ],\n    "timestamp": "2025-04-20 11:24:45"\n}\n\n# -------------------------\n\nMined Block 1: {\n    "hash": "8c63bd4682ed1c53c365ebc9878987618eb45c69b9c1941ae3cd69bee1fdd389",\n    "previous_hash": "3f1af6b8c2124cf3063dc68ee0f4889c4c088d3604b6cf42ab50bdd685e8f1b0",\n    "transactions": [\n        "Alice -> Eve: 50"\n    ],\n    "timestamp": "2025-04-20 11:24:45"\n}\n'})}),"\n",(0,s.jsx)(e.admonition,{title:"Mining",type:"info",children:(0,s.jsxs)(e.p,{children:["The process of creating a new block and adding it to the blockchain is called ",(0,s.jsx)(e.strong,{children:"mining"}),". In a real-world blockchain, this process involves solving complex ",(0,s.jsx)(e.strong,{children:"mathematical problems"})," to validate transactions and secure the network."]})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.p,{children:["Next, let's add another transaction of ",(0,s.jsx)(e.code,{children:"50"})," units from ",(0,s.jsx)(e.code,{children:"Bob"})," to ",(0,s.jsx)(e.code,{children:"Alice"})," and mine a second block:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"blockchain.add_transaction(Transaction('Bob', 'Alice', 50))\nmined_block = blockchain.mine_block()\nprint(f\"Blockchain: {blockchain}\")\nprint('\\n# -------------------------\\n')\nprint(f\"Mined Block 2: {mined_block}\")\n"})}),"\n",(0,s.jsxs)(e.p,{children:["The second block is created in the ",(0,s.jsx)(e.strong,{children:"same way"})," as the first one, with the ",(0,s.jsx)(e.code,{children:"previous_hash"})," set to the hash of the first block:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-out",children:'Blockchain: {\n    "hash": "3f1af6b8c2124cf3063dc68ee0f4889c4c088d3604b6cf42ab50bdd685e8f1b0",\n    "previous_hash": "0",\n    "transactions": [],\n    "timestamp": "2025-04-20 11:24:45"\n}\n{\n    "hash": "8c63bd4682ed1c53c365ebc9878987618eb45c69b9c1941ae3cd69bee1fdd389",\n    "previous_hash": "3f1af6b8c2124cf3063dc68ee0f4889c4c088d3604b6cf42ab50bdd685e8f1b0",\n    "transactions": [\n        "Alice -> Eve: 50"\n    ],\n    "timestamp": "2025-04-20 11:24:45"\n}\n{\n    "hash": "25eebad25dc8b2e46b9b2329f58080dd9900e0b1db63ff4ff5427806ce50c1e4",\n    "previous_hash": "8c63bd4682ed1c53c365ebc9878987618eb45c69b9c1941ae3cd69bee1fdd389",\n    "transactions": [\n        "Bob -> Alice: 50"\n    ],\n    "timestamp": "2025-04-20 11:24:45"\n}\n\n# -------------------------\n\nMined Block 2: {\n    "hash": "25eebad25dc8b2e46b9b2329f58080dd9900e0b1db63ff4ff5427806ce50c1e4",\n    "previous_hash": "8c63bd4682ed1c53c365ebc9878987618eb45c69b9c1941ae3cd69bee1fdd389",\n    "transactions": [\n        "Bob -> Alice: 50"\n    ],\n    "timestamp": "2025-04-20 11:24:45"\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"-chain-validation",children:"\ud83d\udd25 Chain Validation"}),"\n",(0,s.jsxs)(e.p,{children:["Now, let's explore what happens if someone tries to ",(0,s.jsx)(e.strong,{children:"tamper"})," with the blockchain:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:'print(f"Validity: {blockchain.is_chain_valid()}")\nprint(\'\\n# -------------------------\\n\')\n\n# -------------------------\n\nblockchain.chain[1].transactions[0].amount = 1000\nprint(f"Tampered Block 1: {blockchain.chain[1]}")\n\n# -------------------------\n\nprint(\'\\n# -------------------------\\n\')\nprint(f"Validity: {blockchain.is_chain_valid()}")\n'})}),"\n",(0,s.jsx)(e.admonition,{title:"Tampering",type:"danger",children:(0,s.jsxs)(e.p,{children:["Eve is trying to cheat by changing the amount of the first transaction from ",(0,s.jsx)(e.code,{children:"50"})," to ",(0,s.jsx)(e.code,{children:"1000"}),"."]})}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"is_chain_valid"})," method will check if the hash of the tampered block ",(0,s.jsx)(e.strong,{children:"matches"})," the calculated hash. If it doesn't, it will return ",(0,s.jsx)(e.code,{children:"False"}),", indicating that the chain is invalid:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-out",children:'Validity: True\n\n# -------------------------\n\nTampered Block 1: {\n    "hash": "8c63bd4682ed1c53c365ebc9878987618eb45c69b9c1941ae3cd69bee1fdd389",\n    "previous_hash": "3f1af6b8c2124cf3063dc68ee0f4889c4c088d3604b6cf42ab50bdd685e8f1b0",\n    "transactions": [\n        "Alice -> Eve: 1000"\n    ],\n    "timestamp": "2025-04-20 11:24:45"\n}\n\n# -------------------------\n\nValidity: False\n'})}),"\n",(0,s.jsxs)(e.p,{children:["This last example demonstrates how the blockchain's integrity is maintained through ",(0,s.jsx)(e.strong,{children:"cryptographic hashing"}),". If any block in the chain is tampered with, the hash of that block will change, causing the ",(0,s.jsx)(e.code,{children:"is_chain_valid"})," method to return ",(0,s.jsx)(e.code,{children:"False"}),". This ensures that the blockchain remains secure and ",(0,s.jsx)(e.strong,{children:"tamper-proof"}),"."]}),"\n",(0,s.jsx)(e.admonition,{title:"Consensus",type:"tip",children:(0,s.jsxs)(e.p,{children:["In a real-world blockchain, the ",(0,s.jsx)(e.strong,{children:"consensus mechanism"})," (like ",(0,s.jsx)(e.em,{children:"Proof of Work"})," or ",(0,s.jsx)(e.em,{children:"Proof of Stake"}),") is used to ensure that all nodes in the network ",(0,s.jsx)(e.strong,{children:"agree on the state"})," of the blockchain. This prevents malicious actors from tampering with the chain and ensures that all transactions are valid."]})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-conclusion",children:"\ud83c\udfaf Conclusion"}),"\n",(0,s.jsxs)(e.p,{children:["In this playground, we have implemented a simple blockchain in Python. We created classes for ",(0,s.jsx)(e.strong,{children:"transactions"}),", ",(0,s.jsx)(e.strong,{children:"blocks"}),", and the ",(0,s.jsx)(e.strong,{children:"blockchain"})," itself. We also demonstrated how to add transactions, mine new blocks, and validate the chain."]})]})}function d(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}},3303:n=>{n.exports=JSON.parse('{"permalink":"/Learning/blog/blockchain-1","editUrl":"https://github.com/robertovicario/Learning/tree/main/app/blog/blockchain/1.md","source":"@site/blog/blockchain/1.md","title":"Introduction to Blockchain","description":"A simple implementation of a blockchain in Python","date":"2025-04-20T09:31:12.532Z","tags":[{"inline":true,"label":"computer-science","permalink":"/Learning/blog/tags/computer-science"},{"inline":true,"label":"blockchain","permalink":"/Learning/blog/tags/blockchain"},{"inline":true,"label":"cybersecurity","permalink":"/Learning/blog/tags/cybersecurity"},{"inline":true,"label":"cryptography","permalink":"/Learning/blog/tags/cryptography"},{"inline":true,"label":"python","permalink":"/Learning/blog/tags/python"}],"readingTime":5.055,"hasTruncateMarker":false,"authors":[{"name":"Roberto Vicario","title":"Software Engineer","url":"https://github.com/robertovicario","image_url":"https://github.com/robertovicario.png","socials":{"website":"https://www.robertovicario.com","instagram":"https://www.instagram.com/robertovicario__","linkedin":"https://www.linkedin.com/in/robertovicario/","github":"https://github.com/robertovicario"},"imageURL":"https://github.com/robertovicario.png","key":null,"page":null}],"frontMatter":{"title":"Introduction to Blockchain","description":"A simple implementation of a blockchain in Python","slug":"blockchain-1","authors":[{"name":"Roberto Vicario","title":"Software Engineer","url":"https://github.com/robertovicario","image_url":"https://github.com/robertovicario.png","socials":{"website":"https://www.robertovicario.com","instagram":"robertovicario__","linkedin":"robertovicario","github":"robertovicario"},"imageURL":"https://github.com/robertovicario.png"}],"tags":["computer-science","blockchain","cybersecurity","cryptography","python"]},"unlisted":false}')},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var c=i(6540);const s={},t=c.createContext(s);function a(n){const e=c.useContext(t);return c.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),c.createElement(t.Provider,{value:e},n.children)}}}]);